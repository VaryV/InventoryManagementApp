@page "/customer"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@rendermode InteractiveServer
<style>
    tr:nth-child(even) {
        background-color: #D6EEEE;
    }
</style>

<PageTitle>Customer List</PageTitle>

<h1>Customer List</h1>

<p></p>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p role="status">
    <table class="table" width="80%">
        <thead>
            <tr>
                <th></th>
                <th><input type="text" placeholder="ID" @bind-value="searchID" @bind-value:event="oninput" @bind-value:after="ListCust"></th>
                <th><input type="text" placeholder="Name" @bind-value="searchName" @bind-value:event="oninput" @bind-value:after="ListCust"></th>
                <th><input type="text" placeholder="Phone" @bind-value="searchPhone" @bind-value:event="oninput" @bind-value:after="ListCust"> </th>
                <th><input type="text" placeholder="Email" @bind-value="searchEmail" @bind-value:event="oninput" @bind-value:after="ListCust"></th>
                <th><input type="text" placeholder="Address" @bind-value="searchAddress" @bind-value:event="oninput" @bind-value:after="ListCust"></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td><button @onclick="() => DeleteCustomer(customer.Id)">Delete</button></td>
                    <td>@customer.Id</td>
                    <td>@customer.name</td>
                    <td>@customer.phone</td>
                    <td>@customer.mail</td>
                    <td>@customer.address</td>
                    <td><a>Invoice History</a></td>
                </tr>
            }
        </tbody>
    </table>
    </p>
    <button @onclick="NavigateToRoute">Add Customer</button>

}

@code {
    private string? searchPhone, searchName, searchEmail, searchAddress;
    private ulong searchID = 0;
    private List<Cust>? customers;
    private void NavigateToRoute()
    {
        NavigationManager.NavigateTo("/add-customer");
    }
    protected override async Task OnInitializedAsync()
    {
        await ListCust();
    }

    private async Task ListCust()
    {
        string ln, lp, le, la;
        if (string.IsNullOrEmpty(searchName))
            ln = "all";
        else
            ln = searchName;
        if (string.IsNullOrEmpty(searchPhone))
            lp = "all";
        else
            lp = searchPhone;
        if (string.IsNullOrEmpty(searchEmail))
            le = "all";
        else
            le = searchEmail;
        if (string.IsNullOrEmpty(searchAddress))
            la = "all";
        else
            la = searchAddress;
        customers = await httpClient.GetFromJsonAsync<List<Cust>>($"http://localhost:5038/list_cust/{searchID}/{ln}/{lp}/{le}/{la}");
    }

    private async Task DeleteCustomer(ulong id)
    {
        Console.WriteLine($"http://localhost:5038/del_cust/{id}");
        HttpResponseMessage response = await httpClient.DeleteAsync($"http://localhost:5038/del_cust/{id}");
        await ListCust();
    }

    public class Cust
    {
        public ulong Id { get; set; }
        public string? name { get; set; }
        public string? phone { get; set; }
        public string? mail { get; set; }
        public string? address { get; set; }
    }
}
